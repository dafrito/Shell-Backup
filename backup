#!/bin/bash
PATH=/bin:/usr/bin
[ -d "$BACKUP_EXECUTABLE_DIR" ] || BACKUP_EXECUTABLE_DIR=${0%/*}
source $BACKUP_EXECUTABLE_DIR/library.sh || exit 1

function check_and_lock {
	if [ "$SESSION" ]; then
		# Already locked, so continue
		return 0;
	fi
	if [ -e "$SESSION_DIR/lock" ]; then
		local lock=$(<$SESSION_DIR/lock)
		TOLERANT=true
		case "$lock" in
			[[:digit:]]*)
				local cmd=$(ps --no-headers p $lock -o cmd)
				if [ "$cmd" ]; then
					error "Backup is locked by a currently running process - PID: $lock, name: '$cmd'"
				else
					error "Backup is locked, but the lock owner is no longer running."
				fi
				;;
			*)
				error "Backup appears to be explicitly locked."
				;;
		esac
		die "Delete $SESSION_DIR/lock to unlock."
	fi
	export SESSION=true
	mkdir -p $SESSION_DIR
	trap "rm -rf '$SESSION_DIR'" EXIT
	echo $$ >$SESSION_DIR/lock
	cat >$SESSION_DIR/settings <<EOF
SETTINGS=$SETTINGS
DRY_RUN=$DRY_RUN
VERBOSE=$VERBOSE
EOF
}

while [ "$1" ]; do 
	cmd=$1
	case "$cmd" in 
		-s|--settings)
			shift
			SETTINGS=$1
			;;
		-n|--dry-run)
			DRY_RUN=true
			VERBOSE=true
			;;
		-v|--verbose)
			VERBOSE=true
			;;
		*)
			ARGS="$ARGS $1"
	esac
	shift
done
source $BACKUP_EXECUTABLE_DIR/load-settings.sh || exit 1

function parse_command {
	cmd=$1
	case "$cmd" in 
		-e|--edit)
			shift
			if [ -n "$1" ]; then
				$EDITOR "$PROFILES/$*"
			else
				$EDITOR $REPOS
			fi ;;
		-lock|--lock)
			check_and_lock
			echo "All backups are locked; delete $SESSION_DIR/lock to unlock." 1>&2
			echo Backup has been explicitly locked. Delete this file to unlock. >$SESSION_DIR/lock
			trap '' EXIT
			exit ;;
		--log)
			cat $LOG
			exit ;;
		-l|--list)
			shift
			for profile in `find $PROFILES -maxdepth 1`; do
				if [ ! -n "$root" ]; then
					root=`echo $profile | wc -m`
				else
					echo ${profile:$root}
				fi
			done  ;;
		-*) die "Unrecognized command: $1" ;;
		*)
			check_and_lock
			$BACKUP_EXECUTABLE_DIR/run_profile $*
			;;
	esac;
}
parse_command $ARGS
