#!/bin/bash
PATH=/bin:/usr/bin
if [ ! -d "$BACKUP_EXECUTABLE_DIR" ]; then
	BACKUP_EXECUTABLE_DIR=${0%/*}
fi
source $BACKUP_EXECUTABLE_DIR/library.sh || exit 1
source $BACKUP_EXECUTABLE_DIR/load-settings.sh || exit 1

function check_and_lock {
	if [ ! "$BACKUP_PID" ]; then
		# We're the parent backup process, so export ourselves.
		export BACKUP_PID=$$
	fi

	SESSION=/tmp/backup
	if [ -e $SESSION/lock ]; then
		if [ "$BACKUP_PID" != `cat $SESSION/lock` ]; then
			error "Backup process at `cat $SESSION/lock` appears to be running; delete $SESSION/lock to unlock."
		fi
		source $SESSION/settings
	else
		mkdir -p $SESSION
		echo $BACKUP_PID >$SESSION/lock
		trap "rm -rf '$SESSION'" EXIT
		touch $SESSION/settings
	fi
}

function parse_command {
	cmd=$1
	case "$cmd" in 
		-n|--dry-run)
			shift
			DRY_RUN=true
			parse_command $*;;
		-v|--verbose)
			shift
			VERBOSE=true
			parse_command $*;;
		-e|--edit)
			shift
			if [ -n "$1" ]; then
				$EDITOR "$PROFILES/$*"
			else
				$EDITOR $REPOS
			fi ;;
		-lock|--lock)
			echo "All backups are locked; delete $SESSION/lock to unlock." 1>&2
			trap '' EXIT
			exit ;;
		--log)
			cat $LOG
			exit ;;
		-l|--list)
			shift
			for profile in `find $PROFILES -maxdepth 1`; do
				if [ ! -n "$root" ]; then
					root=`echo $profile | wc -m`
				else
					echo ${profile:$root}
				fi
			done  ;;
		*)
			check_and_lock
			log "Time of start: `date`"
			cat >$SESSION/settings <<EOF
DRY_RUN=$DRY_RUN
VERBOSE=$VERBOSE
EOF
			profile="$*"
			if [ ! -n "$profile" ]; then
				profile=full
			fi
			[ -n "$profile" ] || error "backup: profile must be given"
			[ -f "$PROFILES/$profile" ] || error "backup: $profile is not a valid profile"
			log "Running profile '$profile'"
			PATH=$PATH:$BACKUP_EXECUTABLE_DIR 
			set -o pipefail
			if [ "$VERBOSE" ]; then
				bash "$PROFILES/$profile"
				R=$?
			else
				bash "$PROFILES/$profile" 2>&1 1>>$LOG | tee -a $LOG 1>&2 
				R=$?
			fi
			if [ "$R" = "0" ]; then
				log "Profile '$profile' was successful."
			else
				log "Profile '$profile' failed with error code: $R"
			fi
			log "Time of completion: `date`"
			exit $R
		;;
	esac;
}
parse_command $*
