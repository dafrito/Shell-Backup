#!/bin/bash
PATH=/bin:/usr/bin
if [ ! -d "$BACKUP_EXECUTABLE_DIR" ]; then
	BACKUP_EXECUTABLE_DIR=${0%/*}
fi
source $BACKUP_EXECUTABLE_DIR/library.sh || exit 1
source $BACKUP_EXECUTABLE_DIR/load-settings.sh || exit 1

function load_remote_repo {
	REMOTES="$TMP/remotes/$REPO_NAME";
	if [ ! -e "$REMOTES" ]; then
		mkdir -p "$TMP/remotes"
		ssh -l "$SSH_USERNAME" "$SSH_URL" "find $REPO_PATH -maxdepth 1 -type d" >$REMOTES
	fi
}

REPO_NAME=$1
[ -n "$REPO_NAME" ] || error "Repository name must be given";
shift
if [ -n "$1" ]; then
	PROJECT=$1
else
	PROJECT=`pwd`
	PROJECT=${PROJECT##*/}
fi
[ -n "$PROJECT" ] || error "Project name must be given";

DATA=`grep "^$REPO_NAME	" "$REPOS"` || error "Repository data could not be found: $REPO_NAME"
set - $DATA
shift
REPO_TYPE=$1
shift

if [ ! "$REPO_TYPE" ]; then
	error "Repository type must be specified for $REPO_NAME";
elif [ ! -f "$BACKUP_EXECUTABLE_DIR/protocols/$REPO_TYPE" ]; then
	error "Unrecognized repository type for $REPO_NAME: $REPO_TYPE";
fi
source $BACKUP_EXECUTABLE_DIR/protocols/$REPO_TYPE || error "protocol failed to load: $REPO_TYPE"
log "Loaded protocol: $REPO_TYPE"
protocol_load_settings $* || error "settings for repository $REPO_NAME failed to load";
if [ "$DRY_RUN" ]; then
	source $BACKUP_EXECUTABLE_DIR/protocols/dry
fi
if [ ! "$REPO_PATH" ]; then
	error "repository $REPO_NAME must specify location";
fi
if [ ! -e $REPO_PATH ]; then
	error "repository $REPO_NAME specifies a non-existent location: $REPO_PATH";
fi
log "Starting push to repository at '$REPO_PATH'"
set -o pipefail
if protocol_repo_exists "$REPO_PATH/$PROJECT"; then
	REPO_PATH=$REPO_PATH/$PROJECT
elif protocol_repo_exists "$REPO_PATH/$PROJECT.git"; then
	REPO_PATH=$REPO_PATH/$PROJECT.git
else
	REPO_PATH=$REPO_PATH/$PROJECT.git
	log "Creating new repository at '$REPO_PATH'"
	protocol_init_repo 2>&1 || error "failed to create repository at $REPO_PATH";
fi
log "Now pushing to '$REPO_PATH'"
protocol_push_repo 2>&1 || error "failed to push to repository at $REPO_PATH";
exit $?
